#!/usr/bin/env bash

# Set strict mode
set -euo pipefail

# Initialize global variables
quiet=false
process=""

# Function to print usage information
usage() {
  cat <<EOF
Usage: omr [options] [process]

Options:
  -h, --help     Show this help message and exit
  -q, --quiet    Suppress non-error output

Process:
  rails   Restart Rails and worker processes
  app     Restart the app process
  If not specified, the process will be auto-detected based on the repository structure.

Environment variables:
  FIRST_ROOT_DIR  The root directory for the project (required)
  FIRST_API_DIR   The API directory name (default: api)
  FIRST_NUXT_DIR  The Nuxt directory name (default: app)

Examples:
  omr -h        # Show help
  omr           # Auto-detect and restart
  omr app       # Restart app
  omr -q rails  # Restart Rails with suppressed output
EOF
}

# Function to set up color output
setup_colors() {
  if [[ -t 1 ]]; then
    GREEN=$(tput setaf 2)
    BLUE=$(tput setaf 4)
    MAGENTA=$(tput setaf 5)
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
  else
    GREEN="" BLUE="" MAGENTA="" BOLD="" RESET=""
  fi
}

# Function for controlled output
output() {
  if [ "$quiet" = false ]; then
    echo "$@"
  fi
}

# Function to print error messages
error() {
  echo "ERROR: $*" >&2
}

# Function to parse command line arguments
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
      usage
      exit 0
      ;;
    -q | --quiet)
      quiet=true
      shift
      ;;
    *)
      if [[ -z $process ]]; then
        process=$1
      else
        error "Unknown argument: $1"
        usage
        exit 1
      fi
      shift
      ;;
    esac
  done
}

# Main function to restart Overmind process
restart() {
  local git_branch_path=$(git rev-parse --show-toplevel 2>/dev/null)
  local branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

  # Check if we're in a git repository
  if [[ -z "$git_branch_path" || -z "$branch" ]]; then
    error "Not in a git repository"
    return 1
  fi

  # Check if FIRST_ROOT_DIR is set and valid (including symlinks)
  if [[ -z "${FIRST_ROOT_DIR:-}" || ! -e "$FIRST_ROOT_DIR" || ! -d "$FIRST_ROOT_DIR" ]]; then
    error "\$FIRST_ROOT_DIR is not set, does not exist, or is not a directory"
    return 1
  fi

  # Detect process if not specified
  if [[ -z $process ]]; then
    if [[ -f "$git_branch_path/nuxt.config.ts" ]]; then
      process="app"
    elif [[ -f "$git_branch_path/config/application.rb" ]]; then
      process="rails"
    else
      error "Unable to detect process. Please specify: rails or app"
      usage
      return 1
    fi
  fi

  # Print info
  output "Issuing a ${MAGENTA}${BOLD}overmind restart $process${RESET} for:"
  output -e "  ${BOLD}Branch:${RESET} ${GREEN}$branch${RESET}"
  output -e "  ${BOLD}Path:${RESET}   ${BLUE}$git_branch_path${RESET}"

  # Perform the restart
  case "$process" in
  rails | worker)
    (cd "$FIRST_ROOT_DIR" && ln -sfn "$git_branch_path" "$FIRST_API_DIR" && overmind restart rails worker)
    ;;
  app)
    (cd "$FIRST_ROOT_DIR" && ln -sfn "$git_branch_path" "$FIRST_NUXT_DIR" && overmind restart app)
    ;;
  *)
    error "Unhandled process argument: $process"
    usage
    return 1
    ;;
  esac
}

main() {
  setup_colors

  if [[ $# -gt 0 ]]; then
    parse_arguments "$@"
  fi

  restart
}

main "$@"
